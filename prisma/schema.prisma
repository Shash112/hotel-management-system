// This is your Prisma schema file for SQLite,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   // ADMIN, CASHIER, WAITER, COOK
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders     Order[]
  payments   Payment[]
  auditLogs  AuditLog[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  categoryId  String
  isActive    Boolean  @default(true)
  isVeg       Boolean  @default(false)
  imageUrl    String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category     Category    @relation(fields: [categoryId], references: [id])
  orderItems   OrderItem[]
  taxes        MenuItemTax[]

  @@map("menu_items")
}

model MenuItemTax {
  id         String  @id @default(cuid())
  menuItemId String
  taxType    String  // CGST, SGST, IGST
  taxRate    Float   // e.g., 9.00 for 9%
  createdAt  DateTime @default(now())

  // Relations
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("menu_item_taxes")
}

model Table {
  id        String   @id @default(cuid())
  number    String   @unique
  capacity  Int      @default(4)
  isActive  Boolean  @default(true)
  isOccupied Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("tables")
}

model Order {
  id          String   @id @default(cuid())
  tableId     String
  userId      String   // Waiter who took the order
  status      String   // PENDING, PREPARING, COMPLETED, CANCELLED
  totalAmount Float    @default(0)
  discountAmount Float @default(0)
  taxAmount   Float    @default(0)
  finalAmount Float    @default(0)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  table     Table      @relation(fields: [tableId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  items     OrderItem[]
  payments  Payment[]
  auditLogs AuditLog[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  menuItemId  String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  status      String   // PENDING, PREPARING, COMPLETED
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  userId        String   // Cashier who processed the payment
  amount        Float
  method        String   // CASH, CARD, UPI, WALLET
  status        String   // PENDING, COMPLETED, FAILED, REFUNDED
  transactionId String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Bill {
  id                String   @id @default(cuid())
  orderId           String   @unique
  billNumber        String   @unique
  hotelName         String
  hotelAddress      String
  gstNumber         String
  customerName      String?
  customerPhone     String?
  customerEmail     String?
  subtotal          Float
  discountAmount    Float    @default(0)
  taxAmount         Float
  cgstAmount        Float    @default(0)
  sgstAmount        Float    @default(0)
  igstAmount        Float    @default(0)
  serviceCharge     Float    @default(0)
  finalAmount       Float
  isPaid            Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("bills")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  orderId   String?
  action    String
  details   String?  // JSON as string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("audit_logs")
}

model Theme {
  id          String   @id @default(cuid())
  name        String   @unique
  isActive    Boolean  @default(false)
  primaryColor String
  secondaryColor String
  accentColor String
  backgroundColor String
  textColor   String
  borderRadius String
  fontFamily  String
  logoUrl     String?
  customCss   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("themes")
}
